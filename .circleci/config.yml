version: 2.1

jobs:
  test:
    docker:
      - image: cimg/python:3.10.1
    environment:
      ENV_FILE: code/meuapp/.env
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get -y install binutils libproj-dev gdal-bin libjpeg-dev zlib1g-dev rabbitmq-server
            pip install --upgrade pip ipython redis celery flower gunicorn
      - run:
          name: install development requirements
          command: |
            pip install -r code/requirements-dev.txt
      - run:
          name: install requirements
          command: |
            pip install -r code/requirements.txt
      - run:
          name: run tests
          command: python code/manage.py test
#      - run:
#          name: setup environment variables
#          command: |
#            echo USE_S3=$USE_S3 | cat >> $ENV_FILE
#            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID | cat >> $ENV_FILE
#            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY | cat >> $ENV_FILE
#            echo AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME | cat >> $ENV_FILE
#      - run:
#          name: install aws cli
#          command: |
#            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#            unzip awscliv2.zip
#            sudo ./aws/install
#      - run:
#          name: configure aws cli
#          command: |
#            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#      - run:
#          name: collect static files
#          command: |
#            python code/manage.py collectstatic --no-input
##            aws s3 sync code/static/ s3://$AWS_STORAGE_BUCKET_NAME/static/
#      - setup_remote_docker:
#          version: 20.10.24
#          docker_layer_caching: true
#      - run:
#          name: authenticate to dockerhub
#          command: echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
#      - run:
#          name: build docker image
#          command: docker build -t xdot2012/circle_ci_python:$CIRCLE_BRANCH .
#      - run:
#          name: push docker image
#          command: docker push xdot2012/circle_ci_python:$CIRCLE_BRANCH

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@03.2.0

workflows:
  build-and-deploy:
    jobs:
      - test
      - aws-ecr/build-and-push-image:
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "${CIRCLE_SHA1}"
          requires:
            - test
          filters:
            branches:
              only: master

      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image # only run this job once aws-ecr/build-and-push-image has completed
          family: "${AWS_RESOURCE_NAME_PREFIX}-service"
          cluster: "${AWS_RESOURCE_NAME_PREFIX}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX}-service,tag=${CIRCLE_SHA1}"
